// ------------------------------------------------------------
// Ancestor Kit: Vladren Moroi — The Crimson Tide
// ------------------------------------------------------------
// What this does (simple terms):
//   • Creates a Character "Ancestor — Vladren Moroi (PlayerName)" and assigns it to the player.
//   • Creates a Handout (or fills Character Bio) with the full rules text.
//   • Adds 4 Token Actions: Crimson Pact, Transfusion, Sanguine Pool, Hemoplague.
//   • Stores PB/Spell Mod in state (optional; falls back to roll queries).
//   • Exposes install/reset helpers and a tiny charges store (1/SR features).
// ------------------------------------------------------------

var AncestorKits = (function(ns){
  'use strict';

  var KIT_NAME = 'Vladren Moroi';
  var DISPLAY = 'Ancestor — Vladren Moroi';

  // ------- exact rules text (from your source document) -------
  var VLADREN_TEXT = [
    '<b>Crimson Pact.</b> Excess healing becomes <b>temp HP</b> (cap <b>5×PB + spell mod</b>). While you have Pact temp HP: <b>+1 AC</b>; your <b>necrotic ignores resistance</b> (treat immunity as resistance).',
    '<b>Transfusion (Bonus, 1/turn).</b> One creature within <b>60 ft</b> makes a <b>Con save</b>. Fail: <b>2d8 necrotic + PB</b> (success half). You <b>heal</b> for the damage dealt. If the target is <b>½ HP or less</b>, Transfusion deals <b>+1d8 necrotic</b>.',
    '<b>Sanguine Pool (Reaction, 1/SR).</b> When you take damage, become <b>blood mist</b> until the start of your next turn: <b>resistance to all</b>, you can <b>move through creatures</b>, you <b>can’t cast leveled spells or make attacks</b>, and <b>enemies can’t make OAs</b> against you.',
    '<b>Hemoplague (1/SR).</b> <b>20-ft radius</b> point within 60 ft, Con save → target is <b>Plagued</b> until end of next turn (<b>+PB damage</b> from all sources), then it takes <b>6d6 necrotic</b> (success <b>3d6</b>). You <b>heal</b> for the total necrotic; excess healing becomes <b>Pact temp HP</b>.'
  ].join('<br><br>');

  // ---------- small utils ----------
  function canonName(s){ return (s||'').replace(/[^A-Za-z0-9]/g,''); }
  function getPlayer(playerid){ return getObj('player', playerid); }
  function getPlayerName(playerid){
    var p = getPlayer(playerid); return p ? p.get('_displayname') : 'Unknown';
  }
  function ensureState(){
    if(!state.HoardRun) state.HoardRun = {};
    if(!state.HoardRun.players) state.HoardRun.players = {};
  }
  function psFor(playerid){
    var record;
    ensureState();
    record = state.HoardRun.players[playerid];
    if (!record) {
      record = { stats: {}, charges: {} };
      state.HoardRun.players[playerid] = record;
    }
    return record;
  }

  // ---------- entity creation ----------
  function ensureCharacterFor(playerid){
    var who = getPlayerName(playerid);
    var name = DISPLAY + ' (' + who + ')';

    var ch = findObjs({ _type:'character', name:name })[0];
    if(!ch){
      ch = createObj('character', {
        name: name,
        archived: false
      });
    }

    // Give control to the player and show in their Journal
    ch.set('controlledby', playerid);
    ch.set('inplayerjournals', playerid);

    // Put the rules in the Bio (and a GM note marker)
    ch.set('bio', '<div style="font-family:inherit;font-size:13px;line-height:1.25;">'
        + '<h3 style="margin:0 0 6px 0;">Vladren Moroi — The Crimson Tide</h3>'
        + VLADREN_TEXT + '</div>');
    ch.set('gmnotes', 'Auto-generated by Hoard Run • Do not edit the id: ' + canonName(DISPLAY));

    return ch;
  }

  function ensureHandout(playerid){
    var who = getPlayerName(playerid);
    var title = 'Vladren Moroi — Kit (' + who + ')';
    var ho = findObjs({ _type:'handout', name:title })[0];
    if(!ho){
      ho = createObj('handout', { name:title, archived:false, inplayerjournals: playerid, controlledby: playerid });
    } else {
      ho.set({ inplayerjournals: playerid, controlledby: playerid });
    }
    ho.set('notes', '<div style="font-family:inherit;font-size:13px;line-height:1.25;">'
        + '<h3 style="margin:0 0 6px 0;">Vladren Moroi — The Crimson Tide</h3>'
        + VLADREN_TEXT + '</div>');
    return ho;
  }

  function addAbility(ch, name, action, isToken){
    var a = findObjs({ _type:'ability', _characterid: ch.id, name:name })[0];
    if(!a){
      a = createObj('ability', { name:name, _characterid: ch.id, istokenaction: !!isToken, action: action });
    } else {
      a.set({ istokenaction: !!isToken, action: action });
    }
    return a;
  }

  // ---------- token action bodies (sheet-agnostic) ----------
  function pactAbilityBody(){
    // Uses queries unless you store stats; see install()
    return [
      '&{template:default} {{name=Crimson Pact}}',
      '{{Cap=[[ 5*?{PB|3} + ?{Spell Mod|4} ]]}}',
      '{{While active=+1 AC; your necrotic ignores resistance (treat immunity as resistance).}}',
      '{{Convert healing to temp HP?=[[?{Healed Amount|0}]] (apply up to cap)}}'
    ].join(' ');
  }

  function transfusionAbilityBody(){
    return [
      '&{template:default} {{name=Transfusion (Bonus; 60 ft; Con save)}}',
      '{{Save DC=[[ 8 + ?{PB|3} + ?{Spell Mod|4} ]]}}',
      '{{Damage=[[ 2d8 + ?{PB|3} ]] necrotic (half on success)}}',
      '{{Bloodied bonus=If target ≤ 1/2 HP, add [[ 1d8 ]] necrotic}}',
      '{{Heal yourself=Equal to total necrotic dealt}}'
    ].join(' ');
  }

  function poolAbilityBody(){
    return [
      '/w @{selected|token_name} **Sanguine Pool** (Reaction; 1/SR). You become blood mist until the start of your next turn: resistance to all damage; you can move through creatures; you cannot cast leveled spells or make attacks; enemies cannot make OAs against you.',
      // Optional SFX / marker helpers (comment out if you don’t use them)
      // '/fx glow-blood @{selected|token_id}',
      // '~~HR:toggleMarker bleeding-eye~~'
    ].join('\n');
  }

  function hemoplagueAbilityBody(){
    return [
      '&{template:default} {{name=Hemoplague (1/SR; 20-ft; 60 ft; Con save)}}',
      '{{Plagued=Target is **Plagued** until end of its next turn (takes **+?{PB|3}** damage from all sources)}}',
      '{{Then=Take [[ 6d6 ]] necrotic (success [[ 3d6 ]] necrotic)}}',
      '{{Heal yourself=Equal to necrotic dealt; excess becomes Pact temp HP}}'
    ].join(' ');
  }

  // --- get PC character id from the currently selected token
  function pcIdFromSelected(msg){
    if (!msg.selected || !msg.selected.length) return null;
    var g = getObj('graphic', msg.selected[0]._id);
    if (!g) return null;
    return g.get('represents') || null;
  }

  // --- clone ability bodies onto a target PC character
  function cloneAbilityTo(targetChar, name, action, isToken) {
    var a = findObjs({ _type:'ability', _characterid: targetChar.id, name:name })[0];
    if (!a) {
      a = createObj('ability', { name:name, _characterid: targetChar.id, istokenaction: !!isToken, action: action });
    } else {
      a.set({ istokenaction: !!isToken, action: action });
    }
  }
  function attachButtonsToPC(pcCharId) {
    var pc = getObj('character', pcCharId);
    if (!pc) return false;
    cloneAbilityTo(pc, 'Crimson Pact (info)',              pactAbilityBody(), true);
    cloneAbilityTo(pc, 'Transfusion (Bonus)',              transfusionAbilityBody(), true);
    cloneAbilityTo(pc, 'Sanguine Pool (Reaction • 1/SR)',  poolAbilityBody(), true);
    cloneAbilityTo(pc, 'Hemoplague (1/SR)',                hemoplagueAbilityBody(), true);
    return true;
  }

  // --- whisper a slick GM prompt with a one-click bind button
  function promptBindToSelectedPC(){
    var body = [
      '<div style="margin-bottom:6px;">Select the player\'s <b>PC token</b> on the map, then click:</div>',
      '[Mirror Buttons to Selected PC](!bindvladren)',
      '<div style="margin-top:8px;font-size:11px;color:#bbb;">This copies Vladren\'s four Token Actions onto the selected PC so they appear when that PC token is selected.</div>'
    ].join('<br>');
    var hasUI = (typeof UIManager !== 'undefined' && UIManager && typeof UIManager.panel === 'function');
    var html = hasUI ? UIManager.panel('Bind Vladren to PC', body)
      : '<div style="border:1px solid #444;background:#111;color:#eee;padding:8px;">'
          + '<div style="font-weight:bold;margin-bottom:6px;">Bind Vladren to PC</div>'+ body +'</div>';
    sendChat('Hoard Run', '/w gm ' + html);
  }

  // ---------- public: install/reset ----------
  function install(playerid, opts){
    opts = opts || {};
    var ch = ensureCharacterFor(playerid);
    ensureHandout(playerid);

    // Persist PB/Spell Mod if provided (so abilities can be auto-wired later)
    var ps = psFor(playerid);
    if (typeof opts.pb === 'number') ps.stats.pb = opts.pb;
    if (typeof opts.spellMod === 'number') ps.stats.spellMod = opts.spellMod;

    // Initialize short-rest charges
    ps.charges.vladren = ps.charges.vladren || { sanguinePool:'ready', hemoplague:'ready' };

    // Abilities
    addAbility(ch, 'Crimson Pact (info)', pactAbilityBody(), true);
    addAbility(ch, 'Transfusion (Bonus)', transfusionAbilityBody(), true);
    addAbility(ch, 'Sanguine Pool (Reaction • 1/SR)', poolAbilityBody(), true);
    addAbility(ch, 'Hemoplague (1/SR)', hemoplagueAbilityBody(), true);

    // Friendly ping to GM log
    if (typeof sendChat === 'function'){
      sendChat('Hoard Run', '/w gm ✅ Installed Vladren kit for ' + getPlayerName(playerid) + '.');
    }
    return ch;
  }

  function resetShortRest(playerid){
    var ps = psFor(playerid);
    if (ps.charges && ps.charges.vladren){
      ps.charges.vladren.sanguinePool = 'ready';
      ps.charges.vladren.hemoplague = 'ready';
    }
  }

  // Optional: lightweight chat commands for testing
  on('chat:message', function(msg){
    if (msg.type !== 'api') return;
    if (msg.content === '!givevladren' && playerIsGM(msg.playerid)){
      install(msg.playerid, {}); // GM gets kit; handy for testing in solo
    }
    if (msg.content === '!resetvladren' && playerIsGM(msg.playerid)){
      resetShortRest(msg.playerid);
      sendChat('Hoard Run','/w gm Vladren short-rest charges reset.');
    }
  });

  on('chat:message', function(msg){
    if (msg.type !== 'api') return;
    if (msg.content !== '!bindvladren') return;
    if (!playerIsGM(msg.playerid)) { sendChat('Hoard Run','/w gm ⚠️ Only the GM can bind.'); return; }

    var pcId = pcIdFromSelected(msg);
    if (!pcId) { sendChat('Hoard Run','/w gm ⚠️ Select the PC token first, then click again.'); return; }

    var ok = attachButtonsToPC(pcId);
    if (ok) {
      var pc = getObj('character', pcId);
      sendChat('Hoard Run','/w gm ✅ Mirrored Vladren actions to **'+ (pc ? pc.get('name') : 'PC') +'**.');
    } else {
      sendChat('Hoard Run','/w gm ❌ Could not mirror actions (no character?).');
    }
  });

  // namespace export
  ns = ns || {};
  ns.Vladren = {
    install: install,
    resetShortRest: resetShortRest,
    promptBindToSelectedPC: promptBindToSelectedPC,
    name: KIT_NAME
  };
  return ns;

})(typeof AncestorKits !== 'undefined' ? AncestorKits : {});
